{% extends 'base.md.j2' %}
{% block lead_paragraph %}

This post looks at some simple `rofi` configuration.

{% endblock %}
{% block content %}
## Config File

At the momemnt, `rofi` is using default values and (probably) refers to a config file that doesn't exist.

{{
    shell_session("""\
$ rofi --help \\
    | awk -F':' '/Configuration/{ print \"cat \"$2 }' \\
    | . /dev/stdin

cat: /home/cjharries/.config/rofi/config: No such file or directory
""")
}}

`rofi` provides a couple of ways [to load config](https://github.com/DaveDavenport/rofi/blob/1.4.2/doc/rofi.1.markdown#configuration) (plus templating it for new users). We'll need to create the user directory via `$XDG_USER_CONFIG_DIR` first:

{{
    shell_session("""\
$ echo $XDG_USER_CONFIG_DIR || echo \"export XDG_USER_CONFIG_DIR=/path/to/desired/.config\" >> ~/.whateverrc && source ~/.whateverrc
$ mkdir -p $XDG_USER_CONFIG_DIR/rofi
""")
}}

Since we're running `>=1.4`, we can use [the new config format](https://github.com/DaveDavenport/rofi/blob/1.4.2/doc/rofi-theme.5.markdown).

{{
    shell_session("""\
$ rofi -dump-config > $XDG_USER_CONFIG_DIR/rofi/config.rasi
""")
}}

We've now got a super basic config file that contains every possible option (I think) commented out.

## Script Modi Discovery

If you look at the `man` page or check `rofi`'s help, you'll probably notice that not all the modis are enabled. You can also force the issue by attempting to `-show` a nonexistent modi:

{{
    shell_session("""\
$ rofi -show qqq
Mode qqq is not found.
The following modi are known:
        * +window
        * windowcd
        * +run
        * +ssh
        * drun
        * combi
        * keys
""")
}}

A safer way to discover modi, on the off-chance you're running a `qqq` modi, is to check the tail end of `rofi --help`.

Using the default config, the currently enabled modi are as follows:

{{
    shell_session("""\
$ grep -E '\smodi:' $XDG_USER_CONFIG_DIR/rofi/config.rasi
/*      modi: \"window,run,ssh\";*/
""")
}}

The definition is pretty simple. It's just a comma-separated list of modi inside a string. Since `rofi` gives provides a convenient list of accessible modi, we have two choices:

1. manually pick desired modi and manually update the config like a peasant, or
2. stream the whole thing directly from the help into the config.

Of course, you could probably finish #1 before you get done reading the following code breakdown, but where's the fun in that?

The first thing we have to do is parse the list of available modi. At the moment, it looks like help [leads the list with `Detected modi`](https://github.com/DaveDavenport/rofi/blob/1.4.2/source/rofi.c#L287), prints [modi name and active state](https://github.com/DaveDavenport/rofi/blob/1.4.2/source/rofi.c#L248), and finishes [with an empty line](https://github.com/DaveDavenport/rofi/blob/1.4.2/source/rofi.c#L289). The rest of the help file isn't useful here. We're going to have to parse essentially the entire thing, since the pertinent help appears at the bottom. `sed` would be an okay solution, printing only the lines we're interested in and manipulating them. However, we'd have to pipe those results into something else to clean them up for use as a single-line string. `awk`, on the other hand, will let us parse the file and manipulate the return as needed.

### Available `modi`

To start, let's declare a list of modi and a flag that can be used to determine whether or not the list of modi has started. `awk`'s `BEGIN` section is only run once, at the beginning of the input.

{{
    highlight_block("""\
BEGIN {
    modi = \"\";
    grabbing = 0;
}
""",
        explicit_lexer_name = 'AwkLexer',
        title = 'available-modi-parser snippet'
    )
}}

We'll need some way to let `awk` know when we should start grabbing. `next` lets us skip to the next record without processing anything else.

{{
    highlight_block("""\
/Detected modi/ {
    grabbing = 1;
    next;
}
""",
        explicit_lexer_name = 'AwkLexer',
        title = 'available-modi-parser snippet'
    )
}}

If we're not `grabbing`, there's no reason to process any of the other conditionals.

{{
    highlight_block("""\
!grabbing {
    next;
}
""",
        explicit_lexer_name = 'AwkLexer',
        title = 'available-modi-parser snippet'
    )
}}

Once we are grabbing, we should stop when we hit a line with no fields. The `NF` magic variable counts the number of fields per record. The `exit` command will shoot us either to the `END` of the `awk` script, skipping any remaining records.

{{
    highlight_block("""\
grabbing && !NF {
    exit;
}
""",
        explicit_lexer_name = 'AwkLexer',
        title = 'available-modi-parser snippet'
    )
}}

If we are grabbing and we have records, they're going to look something like this:

{{
    highlight_block("""\
        * +window
""",
        explicit_lexer_name = 'TextLexer',
        linenos = False,
        no_header = True
    )
}}

That means the numbered inputs look something like this:

{{
    highlight_block("""\
$0:         * +window
$1: *
$2: +window
""",
        explicit_lexer_name = 'TextLexer',
        linenos = False,
        no_header = True
    )
}}

So we want to consume `$2`, except we don't want `+`. `gsub` will replace any instance of a pattern in the record. String concantenation you should already understand; `awk` just glues things together without the need for extra operators.

{{
    highlight_block("""\
grabbing {
    gsub(\"+\", \"\");
    modi = $2\",\"modi;
}
""",
        explicit_lexer_name = 'AwkLexer',
        title = 'available-modi-parser snippet'
    )
}}

Finally, at the tail end of the script, we want to print what we've found. Similar to the `BEGIN` block, the `END` block is run once, after all the records are processed (or `exit` is called). `gensub` takes a pattern, a replacement, the method, and input string. If you'll notice above, we're going to have an extra trailing comma at the end of `modi`.

{{
    highlight_block("""\
END {
    print gensub(\",$\", \"\", \"g\", modi);
}
""",
        explicit_lexer_name = 'AwkLexer',
        title = 'available-modi-parser snippet'
    )
}}


At this point, we could do something like this:

{{
    shell_session("""\
$ rofi --help \\
    | awk '\\
        BEGIN{ modi = \"\"; grabbing = 0 } \\
        /Detected modi/{ grabbing = 1; next } \\
        !grabbing { next } \\
        grabbing && !NF { exit } \\
        grabbing { gsub(\"+\",\"\"); modi = $2\",\"modi } \\
        END{ print gensub(\",$\",\"\",\"g\",modi) }'
keys,combi,drun,ssh,run,windowcd,window
""")
}}

However, that means we'd have to manually copy that and manually paste it into out config. Like a peasant. Or we could stream it. Guess what I want to do.

We have a small problem. (Or rather, I have a small problem, possibly related to my lack of `bash` knowledge.) `awk` dumps to `/dev/stdout`. That means consuming `awk` has to be done in a subshell, which is kinda boring, or `source`d (sorta), which is exotic (**AND POTENTIALLY VERY DANGEROUS**). I personally prefer creating variables, rather than throwing together a hot mess of nested subshells. Coming from JavaScript, I'm very wary of callback hell.

We can easily modify what we've written so far to dump a variable instead of a simple string.

{{
    highlight_block("""\
END {
    print \"DISCOVERED_MODI=\"gensub(\",$\", \"\", \"g\", modi);
}
""",
        explicit_lexer_name = 'AwkLexer',
        title = 'available-modi-parser snippet'
    )
}}

{{
    shell_session("""\
$ rofi --help \\
    | awk '\\
        BEGIN{ modi = \"\"; grabbing = 0 } \\
        /Detected modi/{ grabbing = 1; next } \\
        !grabbing { next } \\
        grabbing && !NF { exit } \\
        grabbing { gsub(\"+\",\"\"); modi = $2\",\"modi } \\
        END{ print \"DISCOVERED_MODI=\"gensub(\",$\",\"\",\"g\",modi) }'
DISCOVERED_MODI=keys,combi,drun,ssh,run,windowcd,window
""")
}}

Consuming this is as simple as `source`ing the pipe.

{{
    shell_session("""\
$ rofi --help \\
    | awk '\\
        BEGIN{ modi = \"\"; grabbing = 0 } \\
        /Detected modi/{ grabbing = 1; next } \\
        !grabbing { next } \\
        grabbing && !NF { exit } \\
        grabbing { gsub(\"+\",\"\"); modi = $2\",\"modi } \\
        END{ print \"DISCOVERED_MODI=\"gensub(\",$\",\"\",\"g\",modi) }' \\
    | source /dev/stdin \\
    ; echo $DISCOVERED_MODI
keys,combi,drun,ssh,run,windowcd,window
""")
}}

We'll need to figure out which config option we want to modify:

{{
    shell_session("""\
$ cat $XDG_CONFIG_HOME/rofi/config.rasi | grep modi
/*  modi: \"window,run,ssh\";*/
/*  combi-modi: \"window,run\";*/
""")
}}


### `-show`-able `modi`

To edit the config, we'll have to parse the existing config line-by-line and update the desired values. `sed` is the go-to, but, once again, `awk` offers a couple of features that are useful here:

1. `bash` variable expansion is much easier (i.e. less messy) with `awk`, and
2. manipulating multiple things at the same time is a bit easier.

The first thing we want to do is limit ourselves to the `-show`-able `modi` config:

{{
    shell_session("""\
$ cat $XDG_CONFIG_HOME/rofi/config.rasi \\
    | awk '/\smodi/{ print }'
/*  modi: \"window,run,ssh\";*/
""")
}}

Since we've built a desired list of `modi`, `$DISCOVERED_MODI`, we can simply replace the line. We can set variables in `awk` via `-v` By default, the file uses tab characters (`\t`) to align entries, so we'll need to lead with that.

{{
    shell_session("""\
$ cat $XDG_CONFIG_HOME/rofi/config.rasi \\
    | awk -v MODI=\"$DISCOVERED_MODI\" '/\smodi/{ print \"\\tmodi: \\\"\"MODI\"\\\";\" }'
    modi: \"keys,combi,drun,ssh,run,windowcd,window\";
""")
}}

Provided `awk` is `>=4.1`, we can [edit streams `inplace`](https://www.gnu.org/software/gawk/manual/html_node/Extension-Sample-Inplace.html). We'll need to modify the script to `print` any unmatched lines as well.

{{
    shell_session("""\
$ awk \\
    -i inplace \\
    -v INPLACE_SUFFIX='.bak' \\
    -v MODI=\"$DISCOVERED_MODI\" \\
    '/\smodi/{ print \"\\tmodi: \\\"\"MODI\"\\\";\"; next }{ print }' \\
    $XDG_USER_CONFIG_DIR/rofi/config.rasi
$ diff $XDG_USER_CONFIG_DIR/rofi/config.rasi{.bak,}
""")
}}
{{
    highlight_block("""\
--- $XDG_USER_CONFIG_DIR/rofi/config.rasi.bak
+++ $XDG_USER_CONFIG_DIR/rofi/config.rasi
@@ -2 +2 @@
-/*  modi: \"window,run,ssh\";*/
+    modi: \"keys,combi,drun,ssh,run,windowcd,window\";
""",
        explicit_lexer_name = 'DiffLexer',
        linenos = False,
        no_header = True
    )
}}

### `combi` `modi`

This process is almost identical to [`-show`-able `modi`](#showablemodi), so I'll skip the `awk` breakdown. The `combi` `modi` combines multiple `modi` into a single instance. This allows us to group multiple modes together by default.

The simplest solution would be to repeat exactly what we did above.
{{
    shell_session("""\
$ awk \\
    -i inplace \\
    -v INPLACE_SUFFIX='.bak' \\
    -v MODI=\"$DISCOVERED_MODI\" \\
    '/combi-modi/{ print \"\\tcombi-modi: \\\"\"MODI\"\\\";\"; next }{ print }' \\
    $XDG_USER_CONFIG_DIR/rofi/config.rasi
$ diff $XDG_USER_CONFIG_DIR/rofi/config.rasi{.bak,}
""")
}}
{{
    highlight_block("""\
--- $XDG_USER_CONFIG_DIR/rofi/config.rasi.bak
+++ $XDG_USER_CONFIG_DIR/rofi/config.rasi
@@ -34 +34 @@
-/*  combi-modi: \"window,run\";*/
+    combi-modi: \"keys,combi,drun,ssh,run,windowcd,window\";
""",
        explicit_lexer_name = 'DiffLexer',
        linenos = False,
        no_header = True
    )
}}

However, this causes a fairly abrupt segfault.

{{
    shell_session("""\
$ rofi -show combi
[1]    1269 segmentation fault (core dumped)  rofi -show combi
""")
}}

The problem is straight-forward to debug. `combi` loads the provided list of `modi`. Since `combi` contains itself, it tries to load itself. Ad infinitum. It's also straight-forward to fix.

{{
    shell_session("""\
$ awk \\
    -i inplace \\
    -v INPLACE_SUFFIX='.bak' \\
    -v MODI=\"$DISCOVERED_MODI\" \\
    '/combi-modi/{ print \"\\tcombi-modi: \\\"\"gensub(\"combi,?\", \"\", \"g\", MODI)\"\\\";\"; next }{ print }' \\
    $XDG_USER_CONFIG_DIR/rofi/config.rasi
$ diff $XDG_USER_CONFIG_DIR/rofi/config.rasi{.bak,}
""")
}}
{{
    highlight_block("""\
--- $XDG_USER_CONFIG_DIR/rofi/config.rasi.bak
+++ $XDG_USER_CONFIG_DIR/rofi/config.rasi
@@ -34 +34 @@
-/*  combi-modi: \"window,run\";*/
+    combi-modi: \"keys,drun,ssh,run,windowcd,window\";
""",
        explicit_lexer_name = 'DiffLexer',
        linenos = False,
        no_header = True
    )
}}

### All the `modi`

I've combined everything into a script and a `glob`. The first uses a subshell to discover available `modi` whereas the second `pipe`s and `source`s. The result should be the same.

#### Shell Script

{{
    highlight_block(
        'scripts/discover-and-set-modi',
        blob_path = 'scripts/discover-and-set-modi',
        explicit_lexer_name = 'BashLexer',
        title = 'discover-and-set-modi',
        external_source_link = 'https://github.com/thecjharries/posts-tooling-rofi/blob/master/scripts/discover-and-set-modi'
    )
}}

#### `glob`

This can be used as copypasta. Probably.

{{
    shell_session("""\
$ rofi --help \\
    | awk ' \\
        BEGIN { modi = \"\"; grabbing = 0 } \\
        /Detected modi/ { grabbing = 1; next } \\
        !grabbing { next } \\
        grabbing && !NF { exit } \\
        grabbing { gsub(\"+\",\"\"); modi = $2\",\"modi } \\
        END { print \"DISCOVERED_MODI=\"gensub(\",$\",\"\",\"g\",modi) }' \\
    | source /dev/stdin \\
    ; awk \\
        -i inplace \\
        -v INPLACE_SUFFIX='.bak' \\
        -v MODI=\"$DISCOVERED_MODI\" ' \\
        /\smodi:/ { print \"\tmodi: \\\"\"MODI\"\\\";\"; next } \\
        /combi-modi:/ { print \"\tcombi-modi: \\\"\"gensub(\"combi,?\", \"\", \"g\", MODI)\"\\\";\"; next } \\
        { print }' \\
        \"$XDG_USER_CONFIG_DIR/rofi/config.rasi\" \\
    ; diff \"$XDG_USER_CONFIG_DIR/rofi/config.rasi\"{.bak,}
""")
}}
{{
    highlight_block("""\
--- $XDG_USER_CONFIG_DIR/rofi/config.rasi.bak
+++ $XDG_USER_CONFIG_DIR/rofi/config.rasi
@@ -2 +2 @@
-/*  modi: \"window,run,ssh\";*/
+    modi: \"keys,combi,drun,ssh,run,windowcd,window\";
@@ -34 +34 @@
-/*  combi-modi: \"window,run\";*/
+    combi-modi: \"keys,drun,ssh,run,windowcd,window\";
""",
        explicit_lexer_name = 'DiffLexer',
        linenos = False,
        no_header = True
    )
}}

## Change `-show` Location

By default, `rofi` launches dead-center of the owning screen.

{{
    shell_session("""\
$ rofi -show run
should be in the center
""")
}}

There's a config option, `location`, that allows us to change that position. We can instead place the launcher on any of the cardinals, any of the ordinals, or dead center. The locations follow a pattern like this:
{{
    highlight_block("""\
1 2 3
8 0 4
7 6 5
""",
        explicit_lexer_name = 'TextLexer',
        linenos = False,
        no_header = True
    )
}}

A simple script like this takes cardinals and ordinals as input and updates the location of the main window to match.

{{
    highlight_block(
        'scripts/location-changer',
        blob_path = 'scripts/location-changer',
        explicit_lexer_name = 'BashLexer',
        title = 'location-changer',
        external_source_link = 'https://github.com/thecjharries/posts-tooling-rofi/blob/master/scripts/location-changer'
    )
}}

It's very simple to use. Like `rofi`, it defaults to the center position.

{{
    shell_session("""\
$ scripts/location-changer n
""")
}}
{{
    highlight_block("""\
--- $XDG_USER_CONFIG_DIR/rofi/config.rasi.bak
+++ $XDG_USER_CONFIG_DIR/rofi/config.rasi
@@ -8 +8 @@
-/* location: 0;*/
+   location: 2;
""",
        explicit_lexer_name = 'DiffLexer',
        linenos = False,
        no_header = True
    )
}}
{{
    shell_session("""\
$ scripts/location-changer east
""")
}}
{{
    highlight_block("""\
--- $XDG_USER_CONFIG_DIR/rofi/config.rasi.bak
+++ $XDG_USER_CONFIG_DIR/rofi/config.rasi
@@ -8 +8 @@
-   location: 2;
+   location: 4;
""",
        explicit_lexer_name = 'DiffLexer',
        linenos = False,
        no_header = True
    )
}}
{{
    shell_session("""\
$ scripts/location-changer qqq
""")
}}
{{
    highlight_block("""\
--- $XDG_USER_CONFIG_DIR/rofi/config.rasi.bak
+++ $XDG_USER_CONFIG_DIR/rofi/config.rasi
@@ -8 +8 @@
-   location: 2;
+   location: 0;
""",
        explicit_lexer_name = 'DiffLexer',
        linenos = False,
        no_header = True
    )
}}

## Cycling `modi`

Being able to switch between enabled `modi` makes `rofi` a very useful tool. Cycling should be on by default, but it never hurts to forcibly enable it.

{{
    shell_session("""\
$ sed \\
    --in-place='.bak' \\
    -E 's/^.*\\scycle:.*$/\\tcycle: true;/g' \\
    $XDG_USER_CONFIG_DIR/rofi/config.rasi
$ diff --color --unified=0 \"$XDG_USER_CONFIG_DIR/rofi/config.rasi\"{.bak,}
""")
}}
{{
    highlight_block("""\
--- $XDG_USER_CONFIG_DIR/rofi/config.rasi.bak
+++ $XDG_USER_CONFIG_DIR/rofi/config.rasi
@@ -28 +28 @@
-/* cycle: true;*/
+   cycle: true;
""",
        explicit_lexer_name = 'DiffLexer',
        linenos = False,
        no_header = True
    )
}}

Another useful cycling option is `sidebar-mode`. By default, the main window gives no notification of its `modi`.

![basic-config-without-sidebar](/content/images/2018/01/basic-config-without-sidebar.png)

However, in `sidebar-mode`, `rofi` adds a `modi` bar that shows the active `modi` and lists other available `modi` in the current session. It also adds mouse interaction on top of the `kb-mode-*` shortcuts.

![basic-config-with-sidebar](/content/images/2018/01/basic-config-with-sidebar.png)

{{
    shell_session("""\
$ sed \\
    --in-place='.bak' \\
    -E 's/^.*\\ssidebar-mode:.*$/\\tsidebar-mode: true;/g' \\
    $XDG_USER_CONFIG_DIR/rofi/config.rasi
$ diff --color --unified=0 \"$XDG_USER_CONFIG_DIR/rofi/config.rasi\"{.bak,}
""")
}}
{{
    highlight_block("""\
--- $XDG_USER_CONFIG_DIR/rofi/config.rasi.bak
+++ $XDG_USER_CONFIG_DIR/rofi/config.rasi
@@ -29 +29 @@
-/* sidebar-mode: false;*/
+   sidebar-mode: true;
""",
        explicit_lexer_name = 'DiffLexer',
        linenos = False,
        no_header = True
    )
}}

## Sorting

For the most part, `rofi` sorts via [Levenshtein distance](https://en.wikipedia.org/wiki/Levenshtein_distance). In a nutshell, the Levenshtein distance counts the number of changes necessary to go from one string to another. You can view [`rofi`'s implementation](https://github.com/DaveDavenport/rofi/blob/1.4.2/source/helper.c#L691). It's `utf-8`-aware, which is very nice.

When running `fuzzy` matches, `rofi` can also sort [via FZF](https://github.com/junegunn/fzf). Viewing [its implementation of FZF](https://github.com/DaveDavenport/rofi/blob/1.4.2/source/helper.c#L772) might be useful. I believe it too is `utf-8`-aware.

### Comparison

I've made a quick chart to (quite briefly) highlight the differences:

![comparison](/content/images/2018/01/comparison.png)

Personally, I find it useful to have things at least minimally sorted as I'm going.

{{
    shell_session("""\
$ sed \\
    --in-place='.bak' \\
    -E 's/^.*\\ssort:.*$/\\tsort: true;/g' \\
    $XDG_USER_CONFIG_DIR/rofi/config.rasi
$ diff --color --unified=0 \"$XDG_USER_CONFIG_DIR/rofi/config.rasi\"{.bak,}
""")
}}
{{
    highlight_block("""\
--- $XDG_USER_CONFIG_DIR/rofi/config.rasi.bak
+++ $XDG_USER_CONFIG_DIR/rofi/config.rasi
@@ -25 +25 @@
-/* sort: false;*/
+   sort: true;
""",
        explicit_lexer_name = 'DiffLexer',
        linenos = False,
        no_header = True
    )
}}

However, the `matching` method is very much situational. `normal` should work most of the time. `fuzzy` might be better, but I don't have any metrics so I'm not sure how it affects performance and all that. `glob` is amazing when moving files around, but might not be very useful when attempting to `drun`. You could always run `regex` but then no one else would want to read your scripts and you'd turn to a life of blogging like me.

#### Matching/Sorting Comparison Script

For reference, this is the script I used to build the images contained in the chart in this section.

{{
    highlight_block(
        'scripts/generate-matching-and-sorting-comparison',
        blob_path = 'scripts/generate-matching-and-sorting-comparison',
        explicit_lexer_name = 'BashLexer',
        title = 'generate-matching-and-sorting-comparison',
        external_source_link = 'https://github.com/thecjharries/posts-tooling-rofi/blob/master/scripts/generate-matching-and-sorting-comparison'
    )
}}

### (Yet Another) `rofi` Options Script

I slapped together a quick script to handle matching and sorting.

{{
    shell_session("""\
$ scripts/configure-matching-and-sorting -h
usage: configure-matching-and-sorting [-h] [--skip-diff]
                                      [-o {matching,sort,levenshtein-sort}]
                                      [-m [{fuzzy,glob,normal,regex}]]
                                      [-s [{true,false}]] [-l [{true,false}]]

Installs rofi from source

optional arguments:
  -h, --help            show this help message and exit
  --skip-diff           Don't print the config diff
  -o {matching,sort,levenshtein-sort}, --only {matching,sort,levenshtein-sort}
                        Change only the specified option

  -m [{fuzzy,glob,normal,regex}], --matching [{fuzzy,glob,normal,regex}]
                        Sets the matching method
  -s [{true,false}], --sort [{true,false}]
                        Enables sorting
  -l [{true,false}], --levenshtein-sort [{true,false}]
                        Forces Levenshtein sorting
""")
}}

I tried to make this easy. To use the existing config, just add the pertinent flag.

{{
    shell_session("""\
$ scripts/configure-matching-and-sorting -m -s -l
""")
}}
{{
    highlight_block("""\
--- $XDG_USER_CONFIG_DIR/rofi/config.rasi.bak
+++ $XDG_USER_CONFIG_DIR/rofi/config.rasi
@@ -25,2 +25,2 @@
-/*  sort: false;*/
-/*  levenshtein-sort: false;*/
+    sort: false;
+    levenshtein-sort: false;
@@ -35 +35 @@
-/*  matching: \"normal\";*/
+    matching: \"normal\";
""",
        explicit_lexer_name = 'DiffLexer',
        linenos = False,
        no_header = True
    )
}}

While it looks like that did something, it just uncommented the defaults. It didn't actually change anything.

To actually change something, you can either feed it in via the command or leave off the flag and feed it in via the GUI.

{{
    shell_session("""\
$ scripts/configure-matching-and-sorting -o matching -m fuzzy
""")
}}

{{
    highlight_block("""\
--- $XDG_USER_CONFIG_DIR/rofi/config.rasi.bak
+++ $XDG_USER_CONFIG_DIR/rofi/config.rasi
@@ -35 +35 @@
-    matching: \"normal\";
+    matching: \"fuzzy\";
""",
        explicit_lexer_name = 'DiffLexer',
        linenos = False,
        no_header = True
    )
}}

{{
    shell_session("""\
$ scripts/configure-matching-and-sorting -o matching
""")
}}

![configure-matching-and-sorting-gui-matching-glob](/content/images/2018/01/configure-matching-and-sorting-gui-matching-glob.png)

{{
    highlight_block("""\
--- $XDG_USER_CONFIG_DIR/rofi/config.rasi.bak
+++ $XDG_USER_CONFIG_DIR/rofi/config.rasi
@@ -35 +35 @@
-    matching: \"fuzzy\";
+    matching: \"glob\";
""",
        explicit_lexer_name = 'DiffLexer',
        linenos = False,
        no_header = True
    )
}}

#### Full Script

{{
    highlight_block(
        'scripts/configure-matching-and-sorting',
        blob_path = 'scripts/configure-matching-and-sorting',
        explicit_lexer_name = 'PythonLexer',
        title = 'configure-matching-and-sorting',
        external_source_link = 'https://github.com/thecjharries/posts-tooling-rofi/blob/master/scripts/configure-matching-and-sorting'
    )
}}

{% endblock %}
